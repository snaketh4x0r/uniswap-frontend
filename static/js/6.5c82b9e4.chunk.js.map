{"version":3,"sources":["assets/svg/SVGArrowDown.js","components/ContextualInfo/index.js","pages/Pool/RemoveLiquidity.js"],"names":["SVGArrowDown","props","width","height","viewBox","fill","d","SummaryWrapper","styled","div","error","theme","salmonRed","doveGray","Details","concreteGray","SummaryWrapperContainer","flexRowNoWrap","royalBlue","ColoredDropup","isError","highSlippageWarning","rest","ColoredDropdown","ContextualInfo","state","showDetails","this","renderTransactionDetails","openDetailsText","closeDetailsText","contextualInfo","onClick","setState","prevState","renderDetails","Component","defaultProps","ALLOWED_SLIPPAGE","ethers","utils","bigNumberify","DEADLINE_FROM_NOW","GAS_MARGIN","BlueSpan","span","DownArrowBackground","DownArrow","ArrowDown","active","RemoveLiquidityOutput","RemoveLiquidityOutputText","RemoveLiquidityOutputPlus","SummaryPanel","flexColumnNoWrap","LastSummaryText","ExchangeRateWrapper","ExchangeRate","Flex","getMarketRate","reserveETH","reserveToken","decimals","inputValue","inputDecimals","outputValue","outputDecimals","invert","factor","pow","mul","getExchangeRate","calculateSlippageBounds","value","offset","minimum","sub","maximum","add","lt","constants","Zero","gt","MaxUint256","RemoveLiquidity","useWeb3Context","library","account","t","useTranslation","addTransaction","useTransactionAdder","useState","outputCurrency","setOutputCurrency","setValue","inputError","setInputError","valueParsed","setValueParsed","useEffect","parsedValue","parseUnits","useTokenDetails","symbol","exchangeAddress","totalPoolTokens","setTotalPoolTokens","poolTokenBalance","useAddressBalance","exchangeETHBalance","exchangeTokenBalance","exchange","useExchangeContract","ownershipPercentage","isZero","undefined","ownershipPercentageFormatted","amountFormatter","ETHOwnShare","TokenOwnShare","ETHPer","tokenPer","ethWithdrawn","tokenWithdrawn","ethWithdrawnMin","tokenWithdrawnMin","fetchPoolTokens","useCallback","totalSupply","then","a","ReactGA","event","category","action","deadline","Math","ceil","Date","now","estimate","removeLiquidity","estimatedGasLimit","gasLimit","calculateGasMargin","response","on","removeListener","b","text","min","isActive","isValid","marketRate","allBalances","useFetchAllBalances","title","extraText","formatBalance","extraTextClickHander","valueToSet","onCurrencySelected","onValueChange","errorMessage","selectedTokenAddress","alt","description","key","renderInput","disableTokenSelect","disableUnlock","hideBottom","renderSummary","disabled"],"mappings":"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","file":"static/js/6.5c82b9e4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SVGArrowDown = props => (\r\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 9 10\" fill=\"currentColor\" {...props}>\r\n    <path\r\n      d=\"M5.298 0H4.24v7.911h-.075L1.256 4.932l-.717.735L4.769 10 9 5.667l-.718-.735-2.908 2.979h-.076V0z\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </svg>\r\n)\r\n\r\nexport default SVGArrowDown\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nimport { ReactComponent as Dropup } from '../../assets/images/dropup-blue.svg'\r\nimport { ReactComponent as Dropdown } from '../../assets/images/dropdown-blue.svg'\r\n\r\nconst SummaryWrapper = styled.div`\r\n  color: ${({ error, theme }) => (error ? theme.salmonRed : theme.doveGray)};\r\n  font-size: 0.75rem;\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n  padding-top: 1rem;\r\n`\r\n\r\nconst Details = styled.div`\r\n  background-color: ${({ theme }) => theme.concreteGray};\r\n  padding: 1.5rem;\r\n  border-radius: 1rem;\r\n  font-size: 0.75rem;\r\n  margin-top: 1rem;\r\n`\r\n\r\nconst SummaryWrapperContainer = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap};\r\n  color: ${({ theme }) => theme.royalBlue};\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n  padding-top: 1rem;\r\n  cursor: pointer;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 0.75rem;\r\n\r\n  span {\r\n    margin-right: 12px;\r\n  }\r\n\r\n  img {\r\n    height: 0.75rem;\r\n    width: 0.75rem;\r\n  }\r\n`\r\n\r\nconst WrappedDropup = ({ isError, highSlippageWarning, ...rest }) => <Dropup {...rest} />\r\nconst ColoredDropup = styled(WrappedDropup)`\r\n  path {\r\n    stroke: ${({ theme }) => theme.royalBlue};\r\n  }\r\n`\r\n\r\nconst WrappedDropdown = ({ isError, highSlippageWarning, ...rest }) => <Dropdown {...rest} />\r\nconst ColoredDropdown = styled(WrappedDropdown)`\r\n  path {\r\n    stroke: ${({ theme }) => theme.royalBlue};\r\n  }\r\n`\r\n\r\nclass ContextualInfo extends Component {\r\n  static propTypes = {\r\n    openDetailsText: PropTypes.string,\r\n    renderTransactionDetails: PropTypes.func,\r\n    contextualInfo: PropTypes.string,\r\n    isError: PropTypes.bool\r\n  }\r\n\r\n  static defaultProps = {\r\n    openDetailsText: 'Advanced Details',\r\n    closeDetailsText: 'Hide Advanced',\r\n    renderTransactionDetails() {},\r\n    contextualInfo: '',\r\n    isError: false\r\n  }\r\n\r\n  state = {\r\n    showDetails: false\r\n  }\r\n\r\n  renderDetails() {\r\n    if (!this.state.showDetails) {\r\n      return null\r\n    }\r\n\r\n    return <Details>{this.props.renderTransactionDetails()}</Details>\r\n  }\r\n\r\n  render() {\r\n    const { openDetailsText, closeDetailsText, contextualInfo, isError } = this.props\r\n\r\n    if (contextualInfo) {\r\n      return <SummaryWrapper error={isError}>{contextualInfo}</SummaryWrapper>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <SummaryWrapperContainer\r\n          onClick={() =>\r\n            this.setState(prevState => {\r\n              return { showDetails: !prevState.showDetails }\r\n            })\r\n          }\r\n        >\r\n          {!this.state.showDetails ? (\r\n            <>\r\n              <span>{openDetailsText}</span>\r\n              <ColoredDropup />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <span>{closeDetailsText}</span>\r\n              <ColoredDropdown />\r\n            </>\r\n          )}\r\n        </SummaryWrapperContainer>\r\n        {this.renderDetails()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContextualInfo\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport ReactGA from 'react-ga'\r\nimport { useWeb3Context } from 'web3-react'\r\nimport { ethers } from 'ethers'\r\nimport styled from 'styled-components'\r\n\r\nimport { Button } from '../../theme'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport ContextualInfo from '../../components/ContextualInfo'\r\nimport OversizedPanel from '../../components/OversizedPanel'\r\nimport ArrowDown from '../../assets/svg/SVGArrowDown'\r\n\r\nimport { useExchangeContract } from '../../hooks'\r\nimport { useTransactionAdder } from '../../contexts/Transactions'\r\nimport { useTokenDetails } from '../../contexts/Tokens'\r\nimport { useAddressBalance } from '../../contexts/Balances'\r\nimport { useFetchAllBalances } from '../../contexts/AllBalances'\r\nimport { calculateGasMargin, amountFormatter } from '../../utils'\r\n\r\n// denominated in bips\r\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200)\r\n\r\n// denominated in seconds\r\nconst DEADLINE_FROM_NOW = 60 * 15\r\n\r\n// denominated in bips\r\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000)\r\n\r\nconst BlueSpan = styled.span`\r\n  color: ${({ theme }) => theme.royalBlue};\r\n`\r\n\r\nconst DownArrowBackground = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap}\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst DownArrow = styled(ArrowDown)`\r\n  ${({ theme }) => theme.flexRowNoWrap}\r\n  color: ${({ theme, active }) => (active ? theme.royalBlue : theme.doveGray)};\r\n  width: 0.625rem;\r\n  height: 0.625rem;\r\n  position: relative;\r\n  padding: 0.875rem;\r\n`\r\n\r\nconst RemoveLiquidityOutput = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap}\r\n  min-height: 3.5rem;\r\n`\r\n\r\nconst RemoveLiquidityOutputText = styled.div`\r\n  font-size: 1.25rem;\r\n  line-height: 1.5rem;\r\n  padding: 1rem 0.75rem;\r\n`\r\n\r\nconst RemoveLiquidityOutputPlus = styled.div`\r\n  font-size: 1.25rem;\r\n  line-height: 1.5rem;\r\n  padding: 1rem 0;\r\n`\r\n\r\nconst SummaryPanel = styled.div`\r\n  ${({ theme }) => theme.flexColumnNoWrap}\r\n  padding: 1rem 0;\r\n`\r\n\r\nconst LastSummaryText = styled.div`\r\n  margin-top: 1rem;\r\n`\r\n\r\nconst ExchangeRateWrapper = styled.div`\r\n  ${({ theme }) => theme.flexRowNoWrap};\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.doveGray};\r\n  font-size: 0.75rem;\r\n  padding: 0.25rem 1rem 0;\r\n`\r\n\r\nconst ExchangeRate = styled.span`\r\n  flex: 1 1 auto;\r\n  width: 0;\r\n  color: ${({ theme }) => theme.doveGray};\r\n`\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 2rem;\r\n\r\n  button {\r\n    max-width: 20rem;\r\n  }\r\n`\r\n\r\nfunction getExchangeRate(inputValue, inputDecimals, outputValue, outputDecimals, invert = false) {\r\n  try {\r\n    if (\r\n      inputValue &&\r\n      (inputDecimals || inputDecimals === 0) &&\r\n      outputValue &&\r\n      (outputDecimals || outputDecimals === 0)\r\n    ) {\r\n      const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\r\n\r\n      if (invert) {\r\n        return inputValue\r\n          .mul(factor)\r\n          .div(outputValue)\r\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n      } else {\r\n        return outputValue\r\n          .mul(factor)\r\n          .div(inputValue)\r\n          .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n          .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n      }\r\n    }\r\n  } catch {}\r\n}\r\n\r\nfunction getMarketRate(reserveETH, reserveToken, decimals, invert = false) {\r\n  return getExchangeRate(reserveETH, 18, reserveToken, decimals, invert)\r\n}\r\n\r\nfunction calculateSlippageBounds(value) {\r\n  if (value) {\r\n    const offset = value.mul(ALLOWED_SLIPPAGE).div(ethers.utils.bigNumberify(10000))\r\n    const minimum = value.sub(offset)\r\n    const maximum = value.add(offset)\r\n    return {\r\n      minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\r\n      maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\r\n    }\r\n  } else {\r\n    return {}\r\n  }\r\n}\r\n\r\nexport default function RemoveLiquidity() {\r\n  const { library, account, active } = useWeb3Context()\r\n  const { t } = useTranslation()\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const [outputCurrency, setOutputCurrency] = useState('')\r\n  const [value, setValue] = useState('')\r\n  const [inputError, setInputError] = useState()\r\n  const [valueParsed, setValueParsed] = useState()\r\n  // parse value\r\n  useEffect(() => {\r\n    try {\r\n      const parsedValue = ethers.utils.parseUnits(value, 18)\r\n      setValueParsed(parsedValue)\r\n    } catch {\r\n      if (value !== '') {\r\n        setInputError(t('inputNotValid'))\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      setInputError()\r\n      setValueParsed()\r\n    }\r\n  }, [t, value])\r\n\r\n  const { symbol, decimals, exchangeAddress } = useTokenDetails(outputCurrency)\r\n\r\n  const [totalPoolTokens, setTotalPoolTokens] = useState()\r\n  const poolTokenBalance = useAddressBalance(account, exchangeAddress)\r\n  const exchangeETHBalance = useAddressBalance(exchangeAddress, 'ETH')\r\n  const exchangeTokenBalance = useAddressBalance(exchangeAddress, outputCurrency)\r\n\r\n  // input validation\r\n  useEffect(() => {\r\n    if (valueParsed && poolTokenBalance) {\r\n      if (valueParsed.gt(poolTokenBalance)) {\r\n        setInputError(t('insufficientBalance'))\r\n      } else {\r\n        setInputError(null)\r\n      }\r\n    }\r\n  }, [poolTokenBalance, t, valueParsed])\r\n\r\n  const exchange = useExchangeContract(exchangeAddress)\r\n\r\n  const ownershipPercentage =\r\n    poolTokenBalance && totalPoolTokens && !totalPoolTokens.isZero()\r\n      ? poolTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\r\n      : undefined\r\n  const ownershipPercentageFormatted = ownershipPercentage && amountFormatter(ownershipPercentage, 16, 4)\r\n\r\n  const ETHOwnShare =\r\n    exchangeETHBalance &&\r\n    ownershipPercentage &&\r\n    exchangeETHBalance.mul(ownershipPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\r\n  const TokenOwnShare =\r\n    exchangeTokenBalance &&\r\n    ownershipPercentage &&\r\n    exchangeTokenBalance.mul(ownershipPercentage).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\r\n\r\n  const ETHPer =\r\n    exchangeETHBalance && totalPoolTokens && !totalPoolTokens.isZero()\r\n      ? exchangeETHBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\r\n      : undefined\r\n  const tokenPer =\r\n    exchangeTokenBalance && totalPoolTokens && !totalPoolTokens.isZero()\r\n      ? exchangeTokenBalance.mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))).div(totalPoolTokens)\r\n      : undefined\r\n\r\n  const ethWithdrawn =\r\n    ETHPer && valueParsed\r\n      ? ETHPer.mul(valueParsed).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\r\n      : undefined\r\n  const tokenWithdrawn =\r\n    tokenPer && valueParsed\r\n      ? tokenPer.mul(valueParsed).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\r\n      : undefined\r\n\r\n  const ethWithdrawnMin = ethWithdrawn ? calculateSlippageBounds(ethWithdrawn).minimum : undefined\r\n  const tokenWithdrawnMin = tokenWithdrawn ? calculateSlippageBounds(tokenWithdrawn).minimum : undefined\r\n\r\n  const fetchPoolTokens = useCallback(() => {\r\n    if (exchange) {\r\n      exchange.totalSupply().then(totalSupply => {\r\n        setTotalPoolTokens(totalSupply)\r\n      })\r\n    }\r\n  }, [exchange])\r\n  useEffect(() => {\r\n    fetchPoolTokens()\r\n    library.on('block', fetchPoolTokens)\r\n\r\n    return () => {\r\n      library.removeListener('block', fetchPoolTokens)\r\n    }\r\n  }, [fetchPoolTokens, library])\r\n\r\n  async function onRemoveLiquidity() {\r\n    ReactGA.event({\r\n      category: 'Pool',\r\n      action: 'RemoveLiquidity'\r\n    })\r\n\r\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW\r\n\r\n    const estimatedGasLimit = await exchange.estimate.removeLiquidity(\r\n      valueParsed,\r\n      ethWithdrawnMin,\r\n      tokenWithdrawnMin,\r\n      deadline\r\n    )\r\n\r\n    exchange\r\n      .removeLiquidity(valueParsed, ethWithdrawnMin, tokenWithdrawnMin, deadline, {\r\n        gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN)\r\n      })\r\n      .then(response => {\r\n        addTransaction(response)\r\n      })\r\n  }\r\n\r\n  const b = text => <BlueSpan>{text}</BlueSpan>\r\n\r\n  function renderTransactionDetails() {\r\n    ReactGA.event({\r\n      category: 'TransactionDetail',\r\n      action: 'Open'\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          {t('youAreRemoving')} {b(`${amountFormatter(ethWithdrawn, 18, 4)} ETH`)} {t('and')}{' '}\r\n          {b(`${amountFormatter(tokenWithdrawn, decimals, Math.min(decimals, 4))} ${symbol}`)} {t('outPool')}\r\n        </div>\r\n        <LastSummaryText>\r\n          {t('youWillRemove')} {b(amountFormatter(valueParsed, 18, 4))} {t('liquidityTokens')}\r\n        </LastSummaryText>\r\n        <LastSummaryText>\r\n          {t('totalSupplyIs')} {b(amountFormatter(totalPoolTokens, 18, 4))}\r\n        </LastSummaryText>\r\n        <LastSummaryText>\r\n          {t('tokenWorth')} {b(amountFormatter(ETHPer, 18, 4))} ETH {t('and')}{' '}\r\n          {b(amountFormatter(tokenPer, decimals, Math.min(4, decimals)))} {symbol}\r\n        </LastSummaryText>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function renderSummary() {\r\n    let contextualInfo = ''\r\n    let isError = false\r\n\r\n    if (inputError) {\r\n      contextualInfo = inputError\r\n      isError = true\r\n    } else if (!outputCurrency || outputCurrency === 'ETH') {\r\n      contextualInfo = t('selectTokenCont')\r\n    } else if (!valueParsed) {\r\n      contextualInfo = t('enterValueCont')\r\n    } else if (!account) {\r\n      contextualInfo = t('noWallet')\r\n      isError = true\r\n    }\r\n\r\n    return (\r\n      <ContextualInfo\r\n        key=\"context-info\"\r\n        openDetailsText={t('transactionDetails')}\r\n        closeDetailsText={t('hideDetails')}\r\n        contextualInfo={contextualInfo}\r\n        isError={isError}\r\n        renderTransactionDetails={renderTransactionDetails}\r\n      />\r\n    )\r\n  }\r\n\r\n  function formatBalance(value) {\r\n    return `Balance: ${value}`\r\n  }\r\n\r\n  const isActive = active && account\r\n  const isValid = inputError === null\r\n\r\n  const marketRate = getMarketRate(exchangeETHBalance, exchangeTokenBalance, decimals)\r\n\r\n  const allBalances = useFetchAllBalances()\r\n\r\n  return (\r\n    <>\r\n      <CurrencyInputPanel\r\n        title={t('poolTokens')}\r\n        allBalances={allBalances}\r\n        extraText={poolTokenBalance && formatBalance(amountFormatter(poolTokenBalance, 18, 4))}\r\n        extraTextClickHander={() => {\r\n          if (poolTokenBalance) {\r\n            const valueToSet = poolTokenBalance\r\n            if (valueToSet.gt(ethers.constants.Zero)) {\r\n              setValue(amountFormatter(valueToSet, 18, 18, false))\r\n            }\r\n          }\r\n        }}\r\n        onCurrencySelected={setOutputCurrency}\r\n        onValueChange={setValue}\r\n        value={value}\r\n        errorMessage={inputError}\r\n        selectedTokenAddress={outputCurrency}\r\n      />\r\n      <OversizedPanel>\r\n        <DownArrowBackground>\r\n          <DownArrow active={isActive} alt=\"arrow\" />\r\n        </DownArrowBackground>\r\n      </OversizedPanel>\r\n      <CurrencyInputPanel\r\n        title={t('output')}\r\n        allBalances={allBalances}\r\n        description={!!(ethWithdrawn && tokenWithdrawn) ? `(${t('estimated')})` : ''}\r\n        key=\"remove-liquidity-input\"\r\n        renderInput={() =>\r\n          !!(ethWithdrawn && tokenWithdrawn) ? (\r\n            <RemoveLiquidityOutput>\r\n              <RemoveLiquidityOutputText>\r\n                {`${amountFormatter(ethWithdrawn, 18, 4, false)} ETH`}\r\n              </RemoveLiquidityOutputText>\r\n              <RemoveLiquidityOutputPlus> + </RemoveLiquidityOutputPlus>\r\n              <RemoveLiquidityOutputText>\r\n                {`${amountFormatter(tokenWithdrawn, decimals, Math.min(4, decimals))} ${symbol}`}\r\n              </RemoveLiquidityOutputText>\r\n            </RemoveLiquidityOutput>\r\n          ) : (\r\n            <RemoveLiquidityOutput />\r\n          )\r\n        }\r\n        disableTokenSelect\r\n        disableUnlock\r\n      />\r\n      <OversizedPanel key=\"remove-liquidity-input-under\" hideBottom>\r\n        <SummaryPanel>\r\n          <ExchangeRateWrapper>\r\n            <ExchangeRate>{t('exchangeRate')}</ExchangeRate>\r\n            {marketRate ? <span>{`1 ETH = ${amountFormatter(marketRate, 18, 4)} ${symbol}`}</span> : ' - '}\r\n          </ExchangeRateWrapper>\r\n          <ExchangeRateWrapper>\r\n            <ExchangeRate>{t('currentPoolSize')}</ExchangeRate>\r\n            {exchangeETHBalance && exchangeTokenBalance && (decimals || decimals === 0) ? (\r\n              <span>{`${amountFormatter(exchangeETHBalance, 18, 4)} ETH + ${amountFormatter(\r\n                exchangeTokenBalance,\r\n                decimals,\r\n                Math.min(decimals, 4)\r\n              )} ${symbol}`}</span>\r\n            ) : (\r\n              ' - '\r\n            )}\r\n          </ExchangeRateWrapper>\r\n          <ExchangeRateWrapper>\r\n            <ExchangeRate>\r\n              {t('yourPoolShare')} ({ownershipPercentageFormatted && ownershipPercentageFormatted}%)\r\n            </ExchangeRate>\r\n            {ETHOwnShare && TokenOwnShare ? (\r\n              <span>\r\n                {`${amountFormatter(ETHOwnShare, 18, 4)} ETH + ${amountFormatter(\r\n                  TokenOwnShare,\r\n                  decimals,\r\n                  Math.min(decimals, 4)\r\n                )} ${symbol}`}\r\n              </span>\r\n            ) : (\r\n              ' - '\r\n            )}\r\n          </ExchangeRateWrapper>\r\n        </SummaryPanel>\r\n      </OversizedPanel>\r\n      {renderSummary()}\r\n      <Flex>\r\n        <Button disabled={!isValid} onClick={onRemoveLiquidity}>\r\n          {t('removeLiquidity')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n"],"sourceRoot":""}